{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled0.ipynb",
      "provenance": [],
      "mount_file_id": "15Ew1Ci1tTca8CvFh_Qpvhg6QTHtRgYhN",
      "authorship_tag": "ABX9TyNVzROn1HvhWPuTIhw9NZs2",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/KoutamSudeeptha/MINOR-PROJECT/blob/main/code%20for%20project\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "EZVb2WyIOHbH"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ins = pd.read_csv(\"/content/drive/MyDrive/insurance.csv\")\n",
        "ins"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "hL_K2TBUOOsi",
        "outputId": "57f2237a-0263-4c52-e65d-67d6c0cc6594"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Age  Gender     BMI  Children smoker     region      charges\n",
              "0      19  female  27.900         0    yes  southwest  16884.92400\n",
              "1      18    male  33.770         1     no  southeast   1725.55230\n",
              "2      28    male  33.000         3     no  southeast   4449.46200\n",
              "3      33    male  22.705         0     no  northwest  21984.47061\n",
              "4      32    male  28.880         0     no  northwest   3866.85520\n",
              "...   ...     ...     ...       ...    ...        ...          ...\n",
              "1333   50    male  30.970         3     no  northwest  10600.54830\n",
              "1334   18  female  31.920         0     no  northeast   2205.98080\n",
              "1335   18  female  36.850         0     no  southeast   1629.83350\n",
              "1336   21  female  25.800         0     no  southwest   2007.94500\n",
              "1337   61  female  29.070         0    yes  northwest  29141.36030\n",
              "\n",
              "[1338 rows x 7 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6471a6ac-84ae-4bb7-ad2d-b8623f62d2f7\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>Gender</th>\n",
              "      <th>BMI</th>\n",
              "      <th>Children</th>\n",
              "      <th>smoker</th>\n",
              "      <th>region</th>\n",
              "      <th>charges</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>19</td>\n",
              "      <td>female</td>\n",
              "      <td>27.900</td>\n",
              "      <td>0</td>\n",
              "      <td>yes</td>\n",
              "      <td>southwest</td>\n",
              "      <td>16884.92400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>18</td>\n",
              "      <td>male</td>\n",
              "      <td>33.770</td>\n",
              "      <td>1</td>\n",
              "      <td>no</td>\n",
              "      <td>southeast</td>\n",
              "      <td>1725.55230</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>28</td>\n",
              "      <td>male</td>\n",
              "      <td>33.000</td>\n",
              "      <td>3</td>\n",
              "      <td>no</td>\n",
              "      <td>southeast</td>\n",
              "      <td>4449.46200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>33</td>\n",
              "      <td>male</td>\n",
              "      <td>22.705</td>\n",
              "      <td>0</td>\n",
              "      <td>no</td>\n",
              "      <td>northwest</td>\n",
              "      <td>21984.47061</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>32</td>\n",
              "      <td>male</td>\n",
              "      <td>28.880</td>\n",
              "      <td>0</td>\n",
              "      <td>no</td>\n",
              "      <td>northwest</td>\n",
              "      <td>3866.85520</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1333</th>\n",
              "      <td>50</td>\n",
              "      <td>male</td>\n",
              "      <td>30.970</td>\n",
              "      <td>3</td>\n",
              "      <td>no</td>\n",
              "      <td>northwest</td>\n",
              "      <td>10600.54830</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1334</th>\n",
              "      <td>18</td>\n",
              "      <td>female</td>\n",
              "      <td>31.920</td>\n",
              "      <td>0</td>\n",
              "      <td>no</td>\n",
              "      <td>northeast</td>\n",
              "      <td>2205.98080</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1335</th>\n",
              "      <td>18</td>\n",
              "      <td>female</td>\n",
              "      <td>36.850</td>\n",
              "      <td>0</td>\n",
              "      <td>no</td>\n",
              "      <td>southeast</td>\n",
              "      <td>1629.83350</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1336</th>\n",
              "      <td>21</td>\n",
              "      <td>female</td>\n",
              "      <td>25.800</td>\n",
              "      <td>0</td>\n",
              "      <td>no</td>\n",
              "      <td>southwest</td>\n",
              "      <td>2007.94500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1337</th>\n",
              "      <td>61</td>\n",
              "      <td>female</td>\n",
              "      <td>29.070</td>\n",
              "      <td>0</td>\n",
              "      <td>yes</td>\n",
              "      <td>northwest</td>\n",
              "      <td>29141.36030</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1338 rows Ã— 7 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6471a6ac-84ae-4bb7-ad2d-b8623f62d2f7')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-6471a6ac-84ae-4bb7-ad2d-b8623f62d2f7 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-6471a6ac-84ae-4bb7-ad2d-b8623f62d2f7');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(ins.info())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9Zz-8rqgOhYu",
        "outputId": "1a06fc3a-0bfe-415c-ddff-cbe9858a8fee"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 1338 entries, 0 to 1337\n",
            "Data columns (total 7 columns):\n",
            " #   Column    Non-Null Count  Dtype  \n",
            "---  ------    --------------  -----  \n",
            " 0   Age       1338 non-null   int64  \n",
            " 1   Gender    1338 non-null   object \n",
            " 2   BMI       1338 non-null   float64\n",
            " 3   Children  1338 non-null   int64  \n",
            " 4   smoker    1338 non-null   object \n",
            " 5   region    1338 non-null   object \n",
            " 6   charges   1338 non-null   float64\n",
            "dtypes: float64(2), int64(2), object(3)\n",
            "memory usage: 73.3+ KB\n",
            "None\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(ins.describe())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pC8iVyEjOmQ9",
        "outputId": "32ac593d-ee8e-4acb-8def-ce100aac204c"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "               Age          BMI     Children       charges\n",
            "count  1338.000000  1338.000000  1338.000000   1338.000000\n",
            "mean     39.207025    30.663397     1.094918  13270.422265\n",
            "std      14.049960     6.098187     1.205493  12110.011237\n",
            "min      18.000000    15.960000     0.000000   1121.873900\n",
            "25%      27.000000    26.296250     0.000000   4740.287150\n",
            "50%      39.000000    30.400000     1.000000   9382.033000\n",
            "75%      51.000000    34.693750     2.000000  16639.912515\n",
            "max      64.000000    53.130000     5.000000  63770.428010\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "rs = np.random.RandomState(0)\n",
        "df = pd.DataFrame(rs.rand(20,20))\n",
        "corr = df.corr() \n",
        "corr.style.background_gradient(cmap='coolwarm').set_precision(3)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 711
        },
        "id": "H4J8s30ROqcs",
        "outputId": "b9ca1b3d-37c5-4b8a-d028-76183532d6d5"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: FutureWarning: this method is deprecated in favour of `Styler.format(precision=..)`\n",
            "  after removing the cwd from sys.path.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<pandas.io.formats.style.Styler at 0x7f47ec9ed950>"
            ],
            "text/html": [
              "<style type=\"text/css\">\n",
              "#T_1764f_row0_col0, #T_1764f_row1_col1, #T_1764f_row2_col2, #T_1764f_row3_col3, #T_1764f_row4_col4, #T_1764f_row5_col5, #T_1764f_row6_col6, #T_1764f_row7_col7, #T_1764f_row8_col8, #T_1764f_row9_col9, #T_1764f_row10_col10, #T_1764f_row11_col11, #T_1764f_row12_col12, #T_1764f_row13_col13, #T_1764f_row14_col14, #T_1764f_row15_col15, #T_1764f_row16_col16, #T_1764f_row17_col17, #T_1764f_row18_col18, #T_1764f_row19_col19 {\n",
              "  background-color: #b40426;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_1764f_row0_col1, #T_1764f_row5_col17, #T_1764f_row7_col1, #T_1764f_row17_col16 {\n",
              "  background-color: #c3d5f4;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row0_col2, #T_1764f_row6_col9 {\n",
              "  background-color: #cbd8ee;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row0_col3 {\n",
              "  background-color: #e6d7cf;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row0_col4 {\n",
              "  background-color: #8badfd;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row0_col5, #T_1764f_row2_col8, #T_1764f_row2_col12, #T_1764f_row18_col0 {\n",
              "  background-color: #e0dbd8;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row0_col6, #T_1764f_row0_col10, #T_1764f_row1_col13, #T_1764f_row1_col14, #T_1764f_row5_col19, #T_1764f_row6_col0, #T_1764f_row6_col3, #T_1764f_row6_col17, #T_1764f_row8_col11, #T_1764f_row8_col16, #T_1764f_row8_col18, #T_1764f_row10_col5, #T_1764f_row11_col1, #T_1764f_row11_col2, #T_1764f_row11_col8, #T_1764f_row12_col15, #T_1764f_row14_col7, #T_1764f_row14_col9, #T_1764f_row15_col12, #T_1764f_row18_col4, #T_1764f_row18_col5 {\n",
              "  background-color: #3b4cc0;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_1764f_row0_col7, #T_1764f_row3_col4, #T_1764f_row14_col12 {\n",
              "  background-color: #9dbdff;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row0_col8, #T_1764f_row1_col12, #T_1764f_row4_col2 {\n",
              "  background-color: #b5cdfa;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row0_col9, #T_1764f_row7_col4, #T_1764f_row18_col6 {\n",
              "  background-color: #7295f4;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_1764f_row0_col11, #T_1764f_row5_col11, #T_1764f_row9_col6 {\n",
              "  background-color: #dddcdc;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row0_col12, #T_1764f_row8_col9, #T_1764f_row8_col14, #T_1764f_row17_col9 {\n",
              "  background-color: #6687ed;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_1764f_row0_col13, #T_1764f_row7_col2, #T_1764f_row14_col15 {\n",
              "  background-color: #5977e3;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_1764f_row0_col14, #T_1764f_row6_col10, #T_1764f_row11_col6 {\n",
              "  background-color: #8caffe;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row0_col15, #T_1764f_row2_col5 {\n",
              "  background-color: #c7d7f0;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row0_col16, #T_1764f_row5_col8, #T_1764f_row11_col5, #T_1764f_row12_col2 {\n",
              "  background-color: #c9d7f0;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row0_col17, #T_1764f_row17_col10, #T_1764f_row18_col1 {\n",
              "  background-color: #b9d0f9;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row0_col18, #T_1764f_row4_col13, #T_1764f_row16_col15 {\n",
              "  background-color: #d5dbe5;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row0_col19, #T_1764f_row5_col14 {\n",
              "  background-color: #6b8df0;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_1764f_row1_col0, #T_1764f_row2_col4, #T_1764f_row6_col13, #T_1764f_row7_col5, #T_1764f_row7_col9, #T_1764f_row14_col18 {\n",
              "  background-color: #c1d4f4;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row1_col2, #T_1764f_row10_col14, #T_1764f_row19_col8 {\n",
              "  background-color: #a2c1ff;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row1_col3, #T_1764f_row2_col10, #T_1764f_row16_col7 {\n",
              "  background-color: #8fb1fe;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row1_col4, #T_1764f_row3_col10, #T_1764f_row4_col7, #T_1764f_row12_col13 {\n",
              "  background-color: #6282ea;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_1764f_row1_col5, #T_1764f_row9_col0, #T_1764f_row9_col8, #T_1764f_row12_col14, #T_1764f_row15_col4, #T_1764f_row17_col14 {\n",
              "  background-color: #93b5fe;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row1_col6 {\n",
              "  background-color: #b2ccfb;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row1_col7, #T_1764f_row2_col6, #T_1764f_row12_col8 {\n",
              "  background-color: #9fbfff;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row1_col8 {\n",
              "  background-color: #f59f80;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row1_col9 {\n",
              "  background-color: #88abfd;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row1_col10, #T_1764f_row4_col17, #T_1764f_row10_col17, #T_1764f_row17_col15, #T_1764f_row18_col9 {\n",
              "  background-color: #94b6ff;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row1_col11 {\n",
              "  background-color: #445acc;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_1764f_row1_col15, #T_1764f_row8_col19, #T_1764f_row19_col16 {\n",
              "  background-color: #7a9df8;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_1764f_row1_col16, #T_1764f_row10_col4, #T_1764f_row11_col10 {\n",
              "  background-color: #6384eb;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_1764f_row1_col17, #T_1764f_row5_col16, #T_1764f_row11_col0 {\n",
              "  background-color: #d8dce2;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row1_col18, #T_1764f_row3_col13, #T_1764f_row11_col12, #T_1764f_row13_col5, #T_1764f_row13_col16 {\n",
              "  background-color: #a6c4fe;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row1_col19, #T_1764f_row2_col0, #T_1764f_row18_col17 {\n",
              "  background-color: #e2dad5;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row2_col1, #T_1764f_row3_col9, #T_1764f_row12_col19, #T_1764f_row15_col0 {\n",
              "  background-color: #c6d6f1;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row2_col3, #T_1764f_row7_col12 {\n",
              "  background-color: #84a7fc;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_1764f_row2_col7, #T_1764f_row13_col1, #T_1764f_row13_col18, #T_1764f_row19_col2 {\n",
              "  background-color: #5b7ae5;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_1764f_row2_col9 {\n",
              "  background-color: #4961d2;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_1764f_row2_col11, #T_1764f_row8_col7, #T_1764f_row10_col15, #T_1764f_row17_col6 {\n",
              "  background-color: #7699f6;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_1764f_row2_col13, #T_1764f_row7_col14 {\n",
              "  background-color: #5d7ce6;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_1764f_row2_col14, #T_1764f_row11_col9 {\n",
              "  background-color: #b7cff9;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row2_col15, #T_1764f_row14_col16 {\n",
              "  background-color: #80a3fa;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_1764f_row2_col16, #T_1764f_row5_col12, #T_1764f_row15_col1 {\n",
              "  background-color: #7b9ff9;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_1764f_row2_col17, #T_1764f_row3_col18, #T_1764f_row4_col0, #T_1764f_row18_col3 {\n",
              "  background-color: #a3c2fe;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row2_col18, #T_1764f_row12_col0, #T_1764f_row14_col17 {\n",
              "  background-color: #6485ec;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_1764f_row2_col19, #T_1764f_row3_col2 {\n",
              "  background-color: #6c8ff1;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_1764f_row3_col0, #T_1764f_row7_col15, #T_1764f_row19_col1 {\n",
              "  background-color: #edd1c2;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row3_col1, #T_1764f_row5_col13, #T_1764f_row12_col9 {\n",
              "  background-color: #a5c3fe;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row3_col5 {\n",
              "  background-color: #f39577;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row3_col6, #T_1764f_row11_col19, #T_1764f_row12_col4 {\n",
              "  background-color: #516ddb;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_1764f_row3_col7 {\n",
              "  background-color: #e3d9d3;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row3_col8, #T_1764f_row5_col7, #T_1764f_row12_col1, #T_1764f_row16_col18, #T_1764f_row17_col11, #T_1764f_row18_col10 {\n",
              "  background-color: #b6cefa;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row3_col11 {\n",
              "  background-color: #f5c2aa;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row3_col12, #T_1764f_row6_col4, #T_1764f_row12_col7 {\n",
              "  background-color: #5572df;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_1764f_row3_col14 {\n",
              "  background-color: #6180e9;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_1764f_row3_col15, #T_1764f_row18_col11 {\n",
              "  background-color: #e8d6cc;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row3_col16 {\n",
              "  background-color: #f7b79b;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row3_col17, #T_1764f_row4_col5, #T_1764f_row5_col4, #T_1764f_row11_col15, #T_1764f_row16_col0 {\n",
              "  background-color: #d1dae9;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row3_col19 {\n",
              "  background-color: #5f7fe8;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_1764f_row4_col1, #T_1764f_row4_col9, #T_1764f_row10_col13, #T_1764f_row12_col17, #T_1764f_row13_col12 {\n",
              "  background-color: #81a4fb;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_1764f_row4_col3, #T_1764f_row10_col1, #T_1764f_row14_col10, #T_1764f_row16_col17 {\n",
              "  background-color: #a1c0ff;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row4_col6, #T_1764f_row4_col10, #T_1764f_row16_col1, #T_1764f_row19_col14 {\n",
              "  background-color: #7396f5;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_1764f_row4_col8, #T_1764f_row4_col14, #T_1764f_row5_col2, #T_1764f_row9_col7 {\n",
              "  background-color: #bbd1f8;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row4_col11, #T_1764f_row8_col12, #T_1764f_row9_col13, #T_1764f_row11_col14, #T_1764f_row14_col0 {\n",
              "  background-color: #96b7ff;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row4_col12, #T_1764f_row8_col13 {\n",
              "  background-color: #7093f3;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_1764f_row4_col15, #T_1764f_row5_col1, #T_1764f_row13_col3, #T_1764f_row14_col4, #T_1764f_row15_col19, #T_1764f_row17_col4 {\n",
              "  background-color: #adc9fd;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row4_col16, #T_1764f_row15_col5 {\n",
              "  background-color: #c5d6f2;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row4_col18, #T_1764f_row5_col18 {\n",
              "  background-color: #4055c8;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_1764f_row4_col19, #T_1764f_row9_col2, #T_1764f_row19_col5 {\n",
              "  background-color: #3c4ec2;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_1764f_row5_col0, #T_1764f_row7_col3 {\n",
              "  background-color: #ebd3c6;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row5_col3 {\n",
              "  background-color: #f29274;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_1764f_row5_col6, #T_1764f_row12_col5, #T_1764f_row14_col19, #T_1764f_row18_col8 {\n",
              "  background-color: #5e7de7;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_1764f_row5_col9, #T_1764f_row9_col17, #T_1764f_row15_col14 {\n",
              "  background-color: #4e68d8;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_1764f_row5_col10 {\n",
              "  background-color: #4a63d3;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_1764f_row5_col15, #T_1764f_row13_col4, #T_1764f_row15_col11, #T_1764f_row16_col9, #T_1764f_row19_col18 {\n",
              "  background-color: #d6dce4;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row6_col1, #T_1764f_row17_col12 {\n",
              "  background-color: #b3cdfb;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row6_col2, #T_1764f_row15_col8 {\n",
              "  background-color: #7597f6;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_1764f_row6_col5 {\n",
              "  background-color: #4257c9;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_1764f_row6_col7, #T_1764f_row15_col2 {\n",
              "  background-color: #4f69d9;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_1764f_row6_col8, #T_1764f_row6_col19, #T_1764f_row16_col4 {\n",
              "  background-color: #bad0f8;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row6_col11, #T_1764f_row10_col6, #T_1764f_row16_col13 {\n",
              "  background-color: #97b8ff;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row6_col12, #T_1764f_row11_col13, #T_1764f_row12_col6 {\n",
              "  background-color: #f5c4ac;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row6_col14, #T_1764f_row9_col1 {\n",
              "  background-color: #a7c5fe;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row6_col15, #T_1764f_row13_col9, #T_1764f_row13_col10, #T_1764f_row15_col6 {\n",
              "  background-color: #92b4fe;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row6_col16 {\n",
              "  background-color: #455cce;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_1764f_row6_col18, #T_1764f_row15_col17, #T_1764f_row16_col2 {\n",
              "  background-color: #5a78e4;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_1764f_row7_col0, #T_1764f_row9_col12, #T_1764f_row9_col19 {\n",
              "  background-color: #bfd3f6;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row7_col6, #T_1764f_row10_col11, #T_1764f_row13_col19, #T_1764f_row14_col8, #T_1764f_row19_col11 {\n",
              "  background-color: #7da0f9;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_1764f_row7_col8, #T_1764f_row7_col16, #T_1764f_row16_col12 {\n",
              "  background-color: #aac7fd;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row7_col10, #T_1764f_row13_col0 {\n",
              "  background-color: #779af7;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_1764f_row7_col11 {\n",
              "  background-color: #f2cab5;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row7_col13, #T_1764f_row11_col7, #T_1764f_row17_col3 {\n",
              "  background-color: #e1dad6;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row7_col17, #T_1764f_row15_col3 {\n",
              "  background-color: #dedcdb;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row7_col18, #T_1764f_row18_col12, #T_1764f_row18_col16 {\n",
              "  background-color: #bed2f6;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row7_col19 {\n",
              "  background-color: #d2dbe8;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row8_col0, #T_1764f_row8_col5, #T_1764f_row12_col18, #T_1764f_row17_col2 {\n",
              "  background-color: #abc8fd;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row8_col1 {\n",
              "  background-color: #f6a385;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row8_col2, #T_1764f_row10_col8 {\n",
              "  background-color: #c0d4f5;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row8_col3, #T_1764f_row14_col2 {\n",
              "  background-color: #9abbff;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row8_col4, #T_1764f_row10_col16, #T_1764f_row16_col10 {\n",
              "  background-color: #9bbcff;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row8_col6, #T_1764f_row14_col6 {\n",
              "  background-color: #b1cbfc;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row8_col10, #T_1764f_row10_col18, #T_1764f_row12_col11, #T_1764f_row18_col7 {\n",
              "  background-color: #aec9fc;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row8_col15, #T_1764f_row9_col10, #T_1764f_row14_col13 {\n",
              "  background-color: #6a8bef;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_1764f_row8_col17, #T_1764f_row16_col14 {\n",
              "  background-color: #82a6fb;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_1764f_row9_col3, #T_1764f_row15_col16, #T_1764f_row19_col6 {\n",
              "  background-color: #cdd9ec;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row9_col4 {\n",
              "  background-color: #86a9fc;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_1764f_row9_col5, #T_1764f_row10_col9, #T_1764f_row14_col3, #T_1764f_row16_col8, #T_1764f_row18_col13 {\n",
              "  background-color: #5470de;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_1764f_row9_col11, #T_1764f_row17_col5 {\n",
              "  background-color: #d4dbe6;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row9_col14, #T_1764f_row13_col17, #T_1764f_row16_col6 {\n",
              "  background-color: #536edd;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_1764f_row9_col15, #T_1764f_row9_col16 {\n",
              "  background-color: #dfdbd9;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row9_col18, #T_1764f_row12_col16 {\n",
              "  background-color: #9ebeff;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row10_col0, #T_1764f_row14_col1 {\n",
              "  background-color: #485fd1;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_1764f_row10_col2 {\n",
              "  background-color: #6e90f2;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_1764f_row10_col3 {\n",
              "  background-color: #5673e0;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_1764f_row10_col7, #T_1764f_row14_col5, #T_1764f_row18_col15 {\n",
              "  background-color: #5875e1;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_1764f_row10_col12 {\n",
              "  background-color: #ead4c8;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row10_col19 {\n",
              "  background-color: #ecd3c5;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row11_col3, #T_1764f_row17_col1 {\n",
              "  background-color: #efcfbf;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row11_col4, #T_1764f_row17_col13 {\n",
              "  background-color: #6f92f3;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_1764f_row11_col16 {\n",
              "  background-color: #f7ad90;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row11_col17 {\n",
              "  background-color: #799cf8;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_1764f_row11_col18 {\n",
              "  background-color: #d9dce1;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row12_col3, #T_1764f_row19_col4 {\n",
              "  background-color: #3d50c3;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_1764f_row12_col10 {\n",
              "  background-color: #e5d8d1;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row13_col2 {\n",
              "  background-color: #4b64d5;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_1764f_row13_col6, #T_1764f_row18_col19 {\n",
              "  background-color: #d3dbe7;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row13_col7, #T_1764f_row17_col0 {\n",
              "  background-color: #dadce0;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row13_col8 {\n",
              "  background-color: #98b9ff;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row13_col11 {\n",
              "  background-color: #f7b497;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row13_col14, #T_1764f_row19_col13 {\n",
              "  background-color: #7ea1fa;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_1764f_row13_col15, #T_1764f_row15_col7, #T_1764f_row17_col19 {\n",
              "  background-color: #dcdddd;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row14_col11 {\n",
              "  background-color: #a9c6fd;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row15_col9, #T_1764f_row19_col17 {\n",
              "  background-color: #cedaeb;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row15_col10, #T_1764f_row19_col3 {\n",
              "  background-color: #6788ee;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_1764f_row15_col13 {\n",
              "  background-color: #ccd9ed;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row15_col18 {\n",
              "  background-color: #3f53c6;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_1764f_row16_col3 {\n",
              "  background-color: #f7ba9f;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row16_col5 {\n",
              "  background-color: #cfdaea;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row16_col11 {\n",
              "  background-color: #f6a586;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row16_col19 {\n",
              "  background-color: #688aef;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_1764f_row17_col7 {\n",
              "  background-color: #e4d9d2;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row17_col8, #T_1764f_row19_col9 {\n",
              "  background-color: #bcd2f7;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row17_col18 {\n",
              "  background-color: #eed0c0;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row18_col2 {\n",
              "  background-color: #4c66d6;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_1764f_row18_col14, #T_1764f_row19_col7 {\n",
              "  background-color: #cad8ef;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row19_col0 {\n",
              "  background-color: #89acfd;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row19_col10 {\n",
              "  background-color: #f1cdba;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row19_col12 {\n",
              "  background-color: #d7dce3;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_1764f_row19_col15 {\n",
              "  background-color: #c4d5f3;\n",
              "  color: #000000;\n",
              "}\n",
              "</style>\n",
              "<table id=\"T_1764f_\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th class=\"blank level0\" >&nbsp;</th>\n",
              "      <th class=\"col_heading level0 col0\" >0</th>\n",
              "      <th class=\"col_heading level0 col1\" >1</th>\n",
              "      <th class=\"col_heading level0 col2\" >2</th>\n",
              "      <th class=\"col_heading level0 col3\" >3</th>\n",
              "      <th class=\"col_heading level0 col4\" >4</th>\n",
              "      <th class=\"col_heading level0 col5\" >5</th>\n",
              "      <th class=\"col_heading level0 col6\" >6</th>\n",
              "      <th class=\"col_heading level0 col7\" >7</th>\n",
              "      <th class=\"col_heading level0 col8\" >8</th>\n",
              "      <th class=\"col_heading level0 col9\" >9</th>\n",
              "      <th class=\"col_heading level0 col10\" >10</th>\n",
              "      <th class=\"col_heading level0 col11\" >11</th>\n",
              "      <th class=\"col_heading level0 col12\" >12</th>\n",
              "      <th class=\"col_heading level0 col13\" >13</th>\n",
              "      <th class=\"col_heading level0 col14\" >14</th>\n",
              "      <th class=\"col_heading level0 col15\" >15</th>\n",
              "      <th class=\"col_heading level0 col16\" >16</th>\n",
              "      <th class=\"col_heading level0 col17\" >17</th>\n",
              "      <th class=\"col_heading level0 col18\" >18</th>\n",
              "      <th class=\"col_heading level0 col19\" >19</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th id=\"T_1764f_level0_row0\" class=\"row_heading level0 row0\" >0</th>\n",
              "      <td id=\"T_1764f_row0_col0\" class=\"data row0 col0\" >1.000</td>\n",
              "      <td id=\"T_1764f_row0_col1\" class=\"data row0 col1\" >0.113</td>\n",
              "      <td id=\"T_1764f_row0_col2\" class=\"data row0 col2\" >0.286</td>\n",
              "      <td id=\"T_1764f_row0_col3\" class=\"data row0 col3\" >0.361</td>\n",
              "      <td id=\"T_1764f_row0_col4\" class=\"data row0 col4\" >-0.020</td>\n",
              "      <td id=\"T_1764f_row0_col5\" class=\"data row0 col5\" >0.342</td>\n",
              "      <td id=\"T_1764f_row0_col6\" class=\"data row0 col6\" >-0.491</td>\n",
              "      <td id=\"T_1764f_row0_col7\" class=\"data row0 col7\" >0.101</td>\n",
              "      <td id=\"T_1764f_row0_col8\" class=\"data row0 col8\" >0.014</td>\n",
              "      <td id=\"T_1764f_row0_col9\" class=\"data row0 col9\" >-0.093</td>\n",
              "      <td id=\"T_1764f_row0_col10\" class=\"data row0 col10\" >-0.427</td>\n",
              "      <td id=\"T_1764f_row0_col11\" class=\"data row0 col11\" >0.226</td>\n",
              "      <td id=\"T_1764f_row0_col12\" class=\"data row0 col12\" >-0.291</td>\n",
              "      <td id=\"T_1764f_row0_col13\" class=\"data row0 col13\" >-0.209</td>\n",
              "      <td id=\"T_1764f_row0_col14\" class=\"data row0 col14\" >-0.082</td>\n",
              "      <td id=\"T_1764f_row0_col15\" class=\"data row0 col15\" >0.134</td>\n",
              "      <td id=\"T_1764f_row0_col16\" class=\"data row0 col16\" >0.186</td>\n",
              "      <td id=\"T_1764f_row0_col17\" class=\"data row0 col17\" >0.241</td>\n",
              "      <td id=\"T_1764f_row0_col18\" class=\"data row0 col18\" >0.273</td>\n",
              "      <td id=\"T_1764f_row0_col19\" class=\"data row0 col19\" >-0.133</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_1764f_level0_row1\" class=\"row_heading level0 row1\" >1</th>\n",
              "      <td id=\"T_1764f_row1_col0\" class=\"data row1 col0\" >0.113</td>\n",
              "      <td id=\"T_1764f_row1_col1\" class=\"data row1 col1\" >1.000</td>\n",
              "      <td id=\"T_1764f_row1_col2\" class=\"data row1 col2\" >0.127</td>\n",
              "      <td id=\"T_1764f_row1_col3\" class=\"data row1 col3\" >-0.025</td>\n",
              "      <td id=\"T_1764f_row1_col4\" class=\"data row1 col4\" >-0.178</td>\n",
              "      <td id=\"T_1764f_row1_col5\" class=\"data row1 col5\" >0.010</td>\n",
              "      <td id=\"T_1764f_row1_col6\" class=\"data row1 col6\" >0.041</td>\n",
              "      <td id=\"T_1764f_row1_col7\" class=\"data row1 col7\" >0.109</td>\n",
              "      <td id=\"T_1764f_row1_col8\" class=\"data row1 col8\" >0.587</td>\n",
              "      <td id=\"T_1764f_row1_col9\" class=\"data row1 col9\" >-0.011</td>\n",
              "      <td id=\"T_1764f_row1_col10\" class=\"data row1 col10\" >-0.042</td>\n",
              "      <td id=\"T_1764f_row1_col11\" class=\"data row1 col11\" >-0.503</td>\n",
              "      <td id=\"T_1764f_row1_col12\" class=\"data row1 col12\" >0.050</td>\n",
              "      <td id=\"T_1764f_row1_col13\" class=\"data row1 col13\" >-0.342</td>\n",
              "      <td id=\"T_1764f_row1_col14\" class=\"data row1 col14\" >-0.438</td>\n",
              "      <td id=\"T_1764f_row1_col15\" class=\"data row1 col15\" >-0.201</td>\n",
              "      <td id=\"T_1764f_row1_col16\" class=\"data row1 col16\" >-0.236</td>\n",
              "      <td id=\"T_1764f_row1_col17\" class=\"data row1 col17\" >0.371</td>\n",
              "      <td id=\"T_1764f_row1_col18\" class=\"data row1 col18\" >0.066</td>\n",
              "      <td id=\"T_1764f_row1_col19\" class=\"data row1 col19\" >0.358</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_1764f_level0_row2\" class=\"row_heading level0 row2\" >2</th>\n",
              "      <td id=\"T_1764f_row2_col0\" class=\"data row2 col0\" >0.286</td>\n",
              "      <td id=\"T_1764f_row2_col1\" class=\"data row2 col1\" >0.127</td>\n",
              "      <td id=\"T_1764f_row2_col2\" class=\"data row2 col2\" >1.000</td>\n",
              "      <td id=\"T_1764f_row2_col3\" class=\"data row2 col3\" >-0.066</td>\n",
              "      <td id=\"T_1764f_row2_col4\" class=\"data row2 col4\" >0.195</td>\n",
              "      <td id=\"T_1764f_row2_col5\" class=\"data row2 col5\" >0.221</td>\n",
              "      <td id=\"T_1764f_row2_col6\" class=\"data row2 col6\" >-0.038</td>\n",
              "      <td id=\"T_1764f_row2_col7\" class=\"data row2 col7\" >-0.139</td>\n",
              "      <td id=\"T_1764f_row2_col8\" class=\"data row2 col8\" >0.242</td>\n",
              "      <td id=\"T_1764f_row2_col9\" class=\"data row2 col9\" >-0.258</td>\n",
              "      <td id=\"T_1764f_row2_col10\" class=\"data row2 col10\" >-0.059</td>\n",
              "      <td id=\"T_1764f_row2_col11\" class=\"data row2 col11\" >-0.265</td>\n",
              "      <td id=\"T_1764f_row2_col12\" class=\"data row2 col12\" >0.274</td>\n",
              "      <td id=\"T_1764f_row2_col13\" class=\"data row2 col13\" >-0.193</td>\n",
              "      <td id=\"T_1764f_row2_col14\" class=\"data row2 col14\" >0.096</td>\n",
              "      <td id=\"T_1764f_row2_col15\" class=\"data row2 col15\" >-0.180</td>\n",
              "      <td id=\"T_1764f_row2_col16\" class=\"data row2 col16\" >-0.136</td>\n",
              "      <td id=\"T_1764f_row2_col17\" class=\"data row2 col17\" >0.164</td>\n",
              "      <td id=\"T_1764f_row2_col18\" class=\"data row2 col18\" >-0.189</td>\n",
              "      <td id=\"T_1764f_row2_col19\" class=\"data row2 col19\" >-0.131</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_1764f_level0_row3\" class=\"row_heading level0 row3\" >3</th>\n",
              "      <td id=\"T_1764f_row3_col0\" class=\"data row3 col0\" >0.361</td>\n",
              "      <td id=\"T_1764f_row3_col1\" class=\"data row3 col1\" >-0.025</td>\n",
              "      <td id=\"T_1764f_row3_col2\" class=\"data row3 col2\" >-0.066</td>\n",
              "      <td id=\"T_1764f_row3_col3\" class=\"data row3 col3\" >1.000</td>\n",
              "      <td id=\"T_1764f_row3_col4\" class=\"data row3 col4\" >0.048</td>\n",
              "      <td id=\"T_1764f_row3_col5\" class=\"data row3 col5\" >0.678</td>\n",
              "      <td id=\"T_1764f_row3_col6\" class=\"data row3 col6\" >-0.376</td>\n",
              "      <td id=\"T_1764f_row3_col7\" class=\"data row3 col7\" >0.395</td>\n",
              "      <td id=\"T_1764f_row3_col8\" class=\"data row3 col8\" >0.017</td>\n",
              "      <td id=\"T_1764f_row3_col9\" class=\"data row3 col9\" >0.234</td>\n",
              "      <td id=\"T_1764f_row3_col10\" class=\"data row3 col10\" >-0.248</td>\n",
              "      <td id=\"T_1764f_row3_col11\" class=\"data row3 col11\" >0.423</td>\n",
              "      <td id=\"T_1764f_row3_col12\" class=\"data row3 col12\" >-0.364</td>\n",
              "      <td id=\"T_1764f_row3_col13\" class=\"data row3 col13\" >0.092</td>\n",
              "      <td id=\"T_1764f_row3_col14\" class=\"data row3 col14\" >-0.261</td>\n",
              "      <td id=\"T_1764f_row3_col15\" class=\"data row3 col15\" >0.318</td>\n",
              "      <td id=\"T_1764f_row3_col16\" class=\"data row3 col16\" >0.529</td>\n",
              "      <td id=\"T_1764f_row3_col17\" class=\"data row3 col17\" >0.339</td>\n",
              "      <td id=\"T_1764f_row3_col18\" class=\"data row3 col18\" >0.058</td>\n",
              "      <td id=\"T_1764f_row3_col19\" class=\"data row3 col19\" >-0.181</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_1764f_level0_row4\" class=\"row_heading level0 row4\" >4</th>\n",
              "      <td id=\"T_1764f_row4_col0\" class=\"data row4 col0\" >-0.020</td>\n",
              "      <td id=\"T_1764f_row4_col1\" class=\"data row4 col1\" >-0.178</td>\n",
              "      <td id=\"T_1764f_row4_col2\" class=\"data row4 col2\" >0.195</td>\n",
              "      <td id=\"T_1764f_row4_col3\" class=\"data row4 col3\" >0.048</td>\n",
              "      <td id=\"T_1764f_row4_col4\" class=\"data row4 col4\" >1.000</td>\n",
              "      <td id=\"T_1764f_row4_col5\" class=\"data row4 col5\" >0.264</td>\n",
              "      <td id=\"T_1764f_row4_col6\" class=\"data row4 col6\" >-0.228</td>\n",
              "      <td id=\"T_1764f_row4_col7\" class=\"data row4 col7\" >-0.113</td>\n",
              "      <td id=\"T_1764f_row4_col8\" class=\"data row4 col8\" >0.043</td>\n",
              "      <td id=\"T_1764f_row4_col9\" class=\"data row4 col9\" >-0.037</td>\n",
              "      <td id=\"T_1764f_row4_col10\" class=\"data row4 col10\" >-0.174</td>\n",
              "      <td id=\"T_1764f_row4_col11\" class=\"data row4 col11\" >-0.126</td>\n",
              "      <td id=\"T_1764f_row4_col12\" class=\"data row4 col12\" >-0.243</td>\n",
              "      <td id=\"T_1764f_row4_col13\" class=\"data row4 col13\" >0.291</td>\n",
              "      <td id=\"T_1764f_row4_col14\" class=\"data row4 col14\" >0.115</td>\n",
              "      <td id=\"T_1764f_row4_col15\" class=\"data row4 col15\" >0.014</td>\n",
              "      <td id=\"T_1764f_row4_col16\" class=\"data row4 col16\" >0.167</td>\n",
              "      <td id=\"T_1764f_row4_col17\" class=\"data row4 col17\" >0.112</td>\n",
              "      <td id=\"T_1764f_row4_col18\" class=\"data row4 col18\" >-0.348</td>\n",
              "      <td id=\"T_1764f_row4_col19\" class=\"data row4 col19\" >-0.335</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_1764f_level0_row5\" class=\"row_heading level0 row5\" >5</th>\n",
              "      <td id=\"T_1764f_row5_col0\" class=\"data row5 col0\" >0.342</td>\n",
              "      <td id=\"T_1764f_row5_col1\" class=\"data row5 col1\" >0.010</td>\n",
              "      <td id=\"T_1764f_row5_col2\" class=\"data row5 col2\" >0.221</td>\n",
              "      <td id=\"T_1764f_row5_col3\" class=\"data row5 col3\" >0.678</td>\n",
              "      <td id=\"T_1764f_row5_col4\" class=\"data row5 col4\" >0.264</td>\n",
              "      <td id=\"T_1764f_row5_col5\" class=\"data row5 col5\" >1.000</td>\n",
              "      <td id=\"T_1764f_row5_col6\" class=\"data row5 col6\" >-0.317</td>\n",
              "      <td id=\"T_1764f_row5_col7\" class=\"data row5 col7\" >0.195</td>\n",
              "      <td id=\"T_1764f_row5_col8\" class=\"data row5 col8\" >0.108</td>\n",
              "      <td id=\"T_1764f_row5_col9\" class=\"data row5 col9\" >-0.236</td>\n",
              "      <td id=\"T_1764f_row5_col10\" class=\"data row5 col10\" >-0.349</td>\n",
              "      <td id=\"T_1764f_row5_col11\" class=\"data row5 col11\" >0.228</td>\n",
              "      <td id=\"T_1764f_row5_col12\" class=\"data row5 col12\" >-0.195</td>\n",
              "      <td id=\"T_1764f_row5_col13\" class=\"data row5 col13\" >0.087</td>\n",
              "      <td id=\"T_1764f_row5_col14\" class=\"data row5 col14\" >-0.219</td>\n",
              "      <td id=\"T_1764f_row5_col15\" class=\"data row5 col15\" >0.214</td>\n",
              "      <td id=\"T_1764f_row5_col16\" class=\"data row5 col16\" >0.261</td>\n",
              "      <td id=\"T_1764f_row5_col17\" class=\"data row5 col17\" >0.278</td>\n",
              "      <td id=\"T_1764f_row5_col18\" class=\"data row5 col18\" >-0.348</td>\n",
              "      <td id=\"T_1764f_row5_col19\" class=\"data row5 col19\" >-0.341</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_1764f_level0_row6\" class=\"row_heading level0 row6\" >6</th>\n",
              "      <td id=\"T_1764f_row6_col0\" class=\"data row6 col0\" >-0.491</td>\n",
              "      <td id=\"T_1764f_row6_col1\" class=\"data row6 col1\" >0.041</td>\n",
              "      <td id=\"T_1764f_row6_col2\" class=\"data row6 col2\" >-0.038</td>\n",
              "      <td id=\"T_1764f_row6_col3\" class=\"data row6 col3\" >-0.376</td>\n",
              "      <td id=\"T_1764f_row6_col4\" class=\"data row6 col4\" >-0.228</td>\n",
              "      <td id=\"T_1764f_row6_col5\" class=\"data row6 col5\" >-0.317</td>\n",
              "      <td id=\"T_1764f_row6_col6\" class=\"data row6 col6\" >1.000</td>\n",
              "      <td id=\"T_1764f_row6_col7\" class=\"data row6 col7\" >-0.188</td>\n",
              "      <td id=\"T_1764f_row6_col8\" class=\"data row6 col8\" >0.033</td>\n",
              "      <td id=\"T_1764f_row6_col9\" class=\"data row6 col9\" >0.256</td>\n",
              "      <td id=\"T_1764f_row6_col10\" class=\"data row6 col10\" >-0.073</td>\n",
              "      <td id=\"T_1764f_row6_col11\" class=\"data row6 col11\" >-0.120</td>\n",
              "      <td id=\"T_1764f_row6_col12\" class=\"data row6 col12\" >0.443</td>\n",
              "      <td id=\"T_1764f_row6_col13\" class=\"data row6 col13\" >0.199</td>\n",
              "      <td id=\"T_1764f_row6_col14\" class=\"data row6 col14\" >0.034</td>\n",
              "      <td id=\"T_1764f_row6_col15\" class=\"data row6 col15\" >-0.100</td>\n",
              "      <td id=\"T_1764f_row6_col16\" class=\"data row6 col16\" >-0.374</td>\n",
              "      <td id=\"T_1764f_row6_col17\" class=\"data row6 col17\" >-0.217</td>\n",
              "      <td id=\"T_1764f_row6_col18\" class=\"data row6 col18\" >-0.231</td>\n",
              "      <td id=\"T_1764f_row6_col19\" class=\"data row6 col19\" >0.169</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_1764f_level0_row7\" class=\"row_heading level0 row7\" >7</th>\n",
              "      <td id=\"T_1764f_row7_col0\" class=\"data row7 col0\" >0.101</td>\n",
              "      <td id=\"T_1764f_row7_col1\" class=\"data row7 col1\" >0.109</td>\n",
              "      <td id=\"T_1764f_row7_col2\" class=\"data row7 col2\" >-0.139</td>\n",
              "      <td id=\"T_1764f_row7_col3\" class=\"data row7 col3\" >0.395</td>\n",
              "      <td id=\"T_1764f_row7_col4\" class=\"data row7 col4\" >-0.113</td>\n",
              "      <td id=\"T_1764f_row7_col5\" class=\"data row7 col5\" >0.195</td>\n",
              "      <td id=\"T_1764f_row7_col6\" class=\"data row7 col6\" >-0.188</td>\n",
              "      <td id=\"T_1764f_row7_col7\" class=\"data row7 col7\" >1.000</td>\n",
              "      <td id=\"T_1764f_row7_col8\" class=\"data row7 col8\" >-0.038</td>\n",
              "      <td id=\"T_1764f_row7_col9\" class=\"data row7 col9\" >0.214</td>\n",
              "      <td id=\"T_1764f_row7_col10\" class=\"data row7 col10\" >-0.155</td>\n",
              "      <td id=\"T_1764f_row7_col11\" class=\"data row7 col11\" >0.385</td>\n",
              "      <td id=\"T_1764f_row7_col12\" class=\"data row7 col12\" >-0.162</td>\n",
              "      <td id=\"T_1764f_row7_col13\" class=\"data row7 col13\" >0.350</td>\n",
              "      <td id=\"T_1764f_row7_col14\" class=\"data row7 col14\" >-0.276</td>\n",
              "      <td id=\"T_1764f_row7_col15\" class=\"data row7 col15\" >0.362</td>\n",
              "      <td id=\"T_1764f_row7_col16\" class=\"data row7 col16\" >0.052</td>\n",
              "      <td id=\"T_1764f_row7_col17\" class=\"data row7 col17\" >0.399</td>\n",
              "      <td id=\"T_1764f_row7_col18\" class=\"data row7 col18\" >0.164</td>\n",
              "      <td id=\"T_1764f_row7_col19\" class=\"data row7 col19\" >0.275</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_1764f_level0_row8\" class=\"row_heading level0 row8\" >8</th>\n",
              "      <td id=\"T_1764f_row8_col0\" class=\"data row8 col0\" >0.014</td>\n",
              "      <td id=\"T_1764f_row8_col1\" class=\"data row8 col1\" >0.587</td>\n",
              "      <td id=\"T_1764f_row8_col2\" class=\"data row8 col2\" >0.242</td>\n",
              "      <td id=\"T_1764f_row8_col3\" class=\"data row8 col3\" >0.017</td>\n",
              "      <td id=\"T_1764f_row8_col4\" class=\"data row8 col4\" >0.043</td>\n",
              "      <td id=\"T_1764f_row8_col5\" class=\"data row8 col5\" >0.108</td>\n",
              "      <td id=\"T_1764f_row8_col6\" class=\"data row8 col6\" >0.033</td>\n",
              "      <td id=\"T_1764f_row8_col7\" class=\"data row8 col7\" >-0.038</td>\n",
              "      <td id=\"T_1764f_row8_col8\" class=\"data row8 col8\" >1.000</td>\n",
              "      <td id=\"T_1764f_row8_col9\" class=\"data row8 col9\" >-0.139</td>\n",
              "      <td id=\"T_1764f_row8_col10\" class=\"data row8 col10\" >0.065</td>\n",
              "      <td id=\"T_1764f_row8_col11\" class=\"data row8 col11\" >-0.556</td>\n",
              "      <td id=\"T_1764f_row8_col12\" class=\"data row8 col12\" >-0.087</td>\n",
              "      <td id=\"T_1764f_row8_col13\" class=\"data row8 col13\" >-0.117</td>\n",
              "      <td id=\"T_1764f_row8_col14\" class=\"data row8 col14\" >-0.237</td>\n",
              "      <td id=\"T_1764f_row8_col15\" class=\"data row8 col15\" >-0.275</td>\n",
              "      <td id=\"T_1764f_row8_col16\" class=\"data row8 col16\" >-0.425</td>\n",
              "      <td id=\"T_1764f_row8_col17\" class=\"data row8 col17\" >0.050</td>\n",
              "      <td id=\"T_1764f_row8_col18\" class=\"data row8 col18\" >-0.375</td>\n",
              "      <td id=\"T_1764f_row8_col19\" class=\"data row8 col19\" >-0.074</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_1764f_level0_row9\" class=\"row_heading level0 row9\" >9</th>\n",
              "      <td id=\"T_1764f_row9_col0\" class=\"data row9 col0\" >-0.093</td>\n",
              "      <td id=\"T_1764f_row9_col1\" class=\"data row9 col1\" >-0.011</td>\n",
              "      <td id=\"T_1764f_row9_col2\" class=\"data row9 col2\" >-0.258</td>\n",
              "      <td id=\"T_1764f_row9_col3\" class=\"data row9 col3\" >0.234</td>\n",
              "      <td id=\"T_1764f_row9_col4\" class=\"data row9 col4\" >-0.037</td>\n",
              "      <td id=\"T_1764f_row9_col5\" class=\"data row9 col5\" >-0.236</td>\n",
              "      <td id=\"T_1764f_row9_col6\" class=\"data row9 col6\" >0.256</td>\n",
              "      <td id=\"T_1764f_row9_col7\" class=\"data row9 col7\" >0.214</td>\n",
              "      <td id=\"T_1764f_row9_col8\" class=\"data row9 col8\" >-0.139</td>\n",
              "      <td id=\"T_1764f_row9_col9\" class=\"data row9 col9\" >1.000</td>\n",
              "      <td id=\"T_1764f_row9_col10\" class=\"data row9 col10\" >-0.211</td>\n",
              "      <td id=\"T_1764f_row9_col11\" class=\"data row9 col11\" >0.173</td>\n",
              "      <td id=\"T_1764f_row9_col12\" class=\"data row9 col12\" >0.097</td>\n",
              "      <td id=\"T_1764f_row9_col13\" class=\"data row9 col13\" >0.025</td>\n",
              "      <td id=\"T_1764f_row9_col14\" class=\"data row9 col14\" >-0.321</td>\n",
              "      <td id=\"T_1764f_row9_col15\" class=\"data row9 col15\" >0.268</td>\n",
              "      <td id=\"T_1764f_row9_col16\" class=\"data row9 col16\" >0.304</td>\n",
              "      <td id=\"T_1764f_row9_col17\" class=\"data row9 col17\" >-0.139</td>\n",
              "      <td id=\"T_1764f_row9_col18\" class=\"data row9 col18\" >0.038</td>\n",
              "      <td id=\"T_1764f_row9_col19\" class=\"data row9 col19\" >0.193</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_1764f_level0_row10\" class=\"row_heading level0 row10\" >10</th>\n",
              "      <td id=\"T_1764f_row10_col0\" class=\"data row10 col0\" >-0.427</td>\n",
              "      <td id=\"T_1764f_row10_col1\" class=\"data row10 col1\" >-0.042</td>\n",
              "      <td id=\"T_1764f_row10_col2\" class=\"data row10 col2\" >-0.059</td>\n",
              "      <td id=\"T_1764f_row10_col3\" class=\"data row10 col3\" >-0.248</td>\n",
              "      <td id=\"T_1764f_row10_col4\" class=\"data row10 col4\" >-0.174</td>\n",
              "      <td id=\"T_1764f_row10_col5\" class=\"data row10 col5\" >-0.349</td>\n",
              "      <td id=\"T_1764f_row10_col6\" class=\"data row10 col6\" >-0.073</td>\n",
              "      <td id=\"T_1764f_row10_col7\" class=\"data row10 col7\" >-0.155</td>\n",
              "      <td id=\"T_1764f_row10_col8\" class=\"data row10 col8\" >0.065</td>\n",
              "      <td id=\"T_1764f_row10_col9\" class=\"data row10 col9\" >-0.211</td>\n",
              "      <td id=\"T_1764f_row10_col10\" class=\"data row10 col10\" >1.000</td>\n",
              "      <td id=\"T_1764f_row10_col11\" class=\"data row10 col11\" >-0.240</td>\n",
              "      <td id=\"T_1764f_row10_col12\" class=\"data row10 col12\" >0.335</td>\n",
              "      <td id=\"T_1764f_row10_col13\" class=\"data row10 col13\" >-0.053</td>\n",
              "      <td id=\"T_1764f_row10_col14\" class=\"data row10 col14\" >0.010</td>\n",
              "      <td id=\"T_1764f_row10_col15\" class=\"data row10 col15\" >-0.221</td>\n",
              "      <td id=\"T_1764f_row10_col16\" class=\"data row10 col16\" >-0.010</td>\n",
              "      <td id=\"T_1764f_row10_col17\" class=\"data row10 col17\" >0.111</td>\n",
              "      <td id=\"T_1764f_row10_col18\" class=\"data row10 col18\" >0.099</td>\n",
              "      <td id=\"T_1764f_row10_col19\" class=\"data row10 col19\" >0.416</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_1764f_level0_row11\" class=\"row_heading level0 row11\" >11</th>\n",
              "      <td id=\"T_1764f_row11_col0\" class=\"data row11 col0\" >0.226</td>\n",
              "      <td id=\"T_1764f_row11_col1\" class=\"data row11 col1\" >-0.503</td>\n",
              "      <td id=\"T_1764f_row11_col2\" class=\"data row11 col2\" >-0.265</td>\n",
              "      <td id=\"T_1764f_row11_col3\" class=\"data row11 col3\" >0.423</td>\n",
              "      <td id=\"T_1764f_row11_col4\" class=\"data row11 col4\" >-0.126</td>\n",
              "      <td id=\"T_1764f_row11_col5\" class=\"data row11 col5\" >0.228</td>\n",
              "      <td id=\"T_1764f_row11_col6\" class=\"data row11 col6\" >-0.120</td>\n",
              "      <td id=\"T_1764f_row11_col7\" class=\"data row11 col7\" >0.385</td>\n",
              "      <td id=\"T_1764f_row11_col8\" class=\"data row11 col8\" >-0.556</td>\n",
              "      <td id=\"T_1764f_row11_col9\" class=\"data row11 col9\" >0.173</td>\n",
              "      <td id=\"T_1764f_row11_col10\" class=\"data row11 col10\" >-0.240</td>\n",
              "      <td id=\"T_1764f_row11_col11\" class=\"data row11 col11\" >1.000</td>\n",
              "      <td id=\"T_1764f_row11_col12\" class=\"data row11 col12\" >-0.018</td>\n",
              "      <td id=\"T_1764f_row11_col13\" class=\"data row11 col13\" >0.499</td>\n",
              "      <td id=\"T_1764f_row11_col14\" class=\"data row11 col14\" >-0.042</td>\n",
              "      <td id=\"T_1764f_row11_col15\" class=\"data row11 col15\" >0.185</td>\n",
              "      <td id=\"T_1764f_row11_col16\" class=\"data row11 col16\" >0.568</td>\n",
              "      <td id=\"T_1764f_row11_col17\" class=\"data row11 col17\" >0.019</td>\n",
              "      <td id=\"T_1764f_row11_col18\" class=\"data row11 col18\" >0.292</td>\n",
              "      <td id=\"T_1764f_row11_col19\" class=\"data row11 col19\" >-0.239</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_1764f_level0_row12\" class=\"row_heading level0 row12\" >12</th>\n",
              "      <td id=\"T_1764f_row12_col0\" class=\"data row12 col0\" >-0.291</td>\n",
              "      <td id=\"T_1764f_row12_col1\" class=\"data row12 col1\" >0.050</td>\n",
              "      <td id=\"T_1764f_row12_col2\" class=\"data row12 col2\" >0.274</td>\n",
              "      <td id=\"T_1764f_row12_col3\" class=\"data row12 col3\" >-0.364</td>\n",
              "      <td id=\"T_1764f_row12_col4\" class=\"data row12 col4\" >-0.243</td>\n",
              "      <td id=\"T_1764f_row12_col5\" class=\"data row12 col5\" >-0.195</td>\n",
              "      <td id=\"T_1764f_row12_col6\" class=\"data row12 col6\" >0.443</td>\n",
              "      <td id=\"T_1764f_row12_col7\" class=\"data row12 col7\" >-0.162</td>\n",
              "      <td id=\"T_1764f_row12_col8\" class=\"data row12 col8\" >-0.087</td>\n",
              "      <td id=\"T_1764f_row12_col9\" class=\"data row12 col9\" >0.097</td>\n",
              "      <td id=\"T_1764f_row12_col10\" class=\"data row12 col10\" >0.335</td>\n",
              "      <td id=\"T_1764f_row12_col11\" class=\"data row12 col11\" >-0.018</td>\n",
              "      <td id=\"T_1764f_row12_col12\" class=\"data row12 col12\" >1.000</td>\n",
              "      <td id=\"T_1764f_row12_col13\" class=\"data row12 col13\" >-0.171</td>\n",
              "      <td id=\"T_1764f_row12_col14\" class=\"data row12 col14\" >-0.056</td>\n",
              "      <td id=\"T_1764f_row12_col15\" class=\"data row12 col15\" >-0.498</td>\n",
              "      <td id=\"T_1764f_row12_col16\" class=\"data row12 col16\" >0.001</td>\n",
              "      <td id=\"T_1764f_row12_col17\" class=\"data row12 col17\" >0.044</td>\n",
              "      <td id=\"T_1764f_row12_col18\" class=\"data row12 col18\" >0.091</td>\n",
              "      <td id=\"T_1764f_row12_col19\" class=\"data row12 col19\" >0.221</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_1764f_level0_row13\" class=\"row_heading level0 row13\" >13</th>\n",
              "      <td id=\"T_1764f_row13_col0\" class=\"data row13 col0\" >-0.209</td>\n",
              "      <td id=\"T_1764f_row13_col1\" class=\"data row13 col1\" >-0.342</td>\n",
              "      <td id=\"T_1764f_row13_col2\" class=\"data row13 col2\" >-0.193</td>\n",
              "      <td id=\"T_1764f_row13_col3\" class=\"data row13 col3\" >0.092</td>\n",
              "      <td id=\"T_1764f_row13_col4\" class=\"data row13 col4\" >0.291</td>\n",
              "      <td id=\"T_1764f_row13_col5\" class=\"data row13 col5\" >0.087</td>\n",
              "      <td id=\"T_1764f_row13_col6\" class=\"data row13 col6\" >0.199</td>\n",
              "      <td id=\"T_1764f_row13_col7\" class=\"data row13 col7\" >0.350</td>\n",
              "      <td id=\"T_1764f_row13_col8\" class=\"data row13 col8\" >-0.117</td>\n",
              "      <td id=\"T_1764f_row13_col9\" class=\"data row13 col9\" >0.025</td>\n",
              "      <td id=\"T_1764f_row13_col10\" class=\"data row13 col10\" >-0.053</td>\n",
              "      <td id=\"T_1764f_row13_col11\" class=\"data row13 col11\" >0.499</td>\n",
              "      <td id=\"T_1764f_row13_col12\" class=\"data row13 col12\" >-0.171</td>\n",
              "      <td id=\"T_1764f_row13_col13\" class=\"data row13 col13\" >1.000</td>\n",
              "      <td id=\"T_1764f_row13_col14\" class=\"data row13 col14\" >-0.139</td>\n",
              "      <td id=\"T_1764f_row13_col15\" class=\"data row13 col15\" >0.250</td>\n",
              "      <td id=\"T_1764f_row13_col16\" class=\"data row13 col16\" >0.034</td>\n",
              "      <td id=\"T_1764f_row13_col17\" class=\"data row13 col17\" >-0.119</td>\n",
              "      <td id=\"T_1764f_row13_col18\" class=\"data row13 col18\" >-0.230</td>\n",
              "      <td id=\"T_1764f_row13_col19\" class=\"data row13 col19\" >-0.064</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_1764f_level0_row14\" class=\"row_heading level0 row14\" >14</th>\n",
              "      <td id=\"T_1764f_row14_col0\" class=\"data row14 col0\" >-0.082</td>\n",
              "      <td id=\"T_1764f_row14_col1\" class=\"data row14 col1\" >-0.438</td>\n",
              "      <td id=\"T_1764f_row14_col2\" class=\"data row14 col2\" >0.096</td>\n",
              "      <td id=\"T_1764f_row14_col3\" class=\"data row14 col3\" >-0.261</td>\n",
              "      <td id=\"T_1764f_row14_col4\" class=\"data row14 col4\" >0.115</td>\n",
              "      <td id=\"T_1764f_row14_col5\" class=\"data row14 col5\" >-0.219</td>\n",
              "      <td id=\"T_1764f_row14_col6\" class=\"data row14 col6\" >0.034</td>\n",
              "      <td id=\"T_1764f_row14_col7\" class=\"data row14 col7\" >-0.276</td>\n",
              "      <td id=\"T_1764f_row14_col8\" class=\"data row14 col8\" >-0.237</td>\n",
              "      <td id=\"T_1764f_row14_col9\" class=\"data row14 col9\" >-0.321</td>\n",
              "      <td id=\"T_1764f_row14_col10\" class=\"data row14 col10\" >0.010</td>\n",
              "      <td id=\"T_1764f_row14_col11\" class=\"data row14 col11\" >-0.042</td>\n",
              "      <td id=\"T_1764f_row14_col12\" class=\"data row14 col12\" >-0.056</td>\n",
              "      <td id=\"T_1764f_row14_col13\" class=\"data row14 col13\" >-0.139</td>\n",
              "      <td id=\"T_1764f_row14_col14\" class=\"data row14 col14\" >1.000</td>\n",
              "      <td id=\"T_1764f_row14_col15\" class=\"data row14 col15\" >-0.347</td>\n",
              "      <td id=\"T_1764f_row14_col16\" class=\"data row14 col16\" >-0.123</td>\n",
              "      <td id=\"T_1764f_row14_col17\" class=\"data row14 col17\" >-0.052</td>\n",
              "      <td id=\"T_1764f_row14_col18\" class=\"data row14 col18\" >0.182</td>\n",
              "      <td id=\"T_1764f_row14_col19\" class=\"data row14 col19\" >-0.184</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_1764f_level0_row15\" class=\"row_heading level0 row15\" >15</th>\n",
              "      <td id=\"T_1764f_row15_col0\" class=\"data row15 col0\" >0.134</td>\n",
              "      <td id=\"T_1764f_row15_col1\" class=\"data row15 col1\" >-0.201</td>\n",
              "      <td id=\"T_1764f_row15_col2\" class=\"data row15 col2\" >-0.180</td>\n",
              "      <td id=\"T_1764f_row15_col3\" class=\"data row15 col3\" >0.318</td>\n",
              "      <td id=\"T_1764f_row15_col4\" class=\"data row15 col4\" >0.014</td>\n",
              "      <td id=\"T_1764f_row15_col5\" class=\"data row15 col5\" >0.214</td>\n",
              "      <td id=\"T_1764f_row15_col6\" class=\"data row15 col6\" >-0.100</td>\n",
              "      <td id=\"T_1764f_row15_col7\" class=\"data row15 col7\" >0.362</td>\n",
              "      <td id=\"T_1764f_row15_col8\" class=\"data row15 col8\" >-0.275</td>\n",
              "      <td id=\"T_1764f_row15_col9\" class=\"data row15 col9\" >0.268</td>\n",
              "      <td id=\"T_1764f_row15_col10\" class=\"data row15 col10\" >-0.221</td>\n",
              "      <td id=\"T_1764f_row15_col11\" class=\"data row15 col11\" >0.185</td>\n",
              "      <td id=\"T_1764f_row15_col12\" class=\"data row15 col12\" >-0.498</td>\n",
              "      <td id=\"T_1764f_row15_col13\" class=\"data row15 col13\" >0.250</td>\n",
              "      <td id=\"T_1764f_row15_col14\" class=\"data row15 col14\" >-0.347</td>\n",
              "      <td id=\"T_1764f_row15_col15\" class=\"data row15 col15\" >1.000</td>\n",
              "      <td id=\"T_1764f_row15_col16\" class=\"data row15 col16\" >0.208</td>\n",
              "      <td id=\"T_1764f_row15_col17\" class=\"data row15 col17\" >-0.092</td>\n",
              "      <td id=\"T_1764f_row15_col18\" class=\"data row15 col18\" >-0.353</td>\n",
              "      <td id=\"T_1764f_row15_col19\" class=\"data row15 col19\" >0.120</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_1764f_level0_row16\" class=\"row_heading level0 row16\" >16</th>\n",
              "      <td id=\"T_1764f_row16_col0\" class=\"data row16 col0\" >0.186</td>\n",
              "      <td id=\"T_1764f_row16_col1\" class=\"data row16 col1\" >-0.236</td>\n",
              "      <td id=\"T_1764f_row16_col2\" class=\"data row16 col2\" >-0.136</td>\n",
              "      <td id=\"T_1764f_row16_col3\" class=\"data row16 col3\" >0.529</td>\n",
              "      <td id=\"T_1764f_row16_col4\" class=\"data row16 col4\" >0.167</td>\n",
              "      <td id=\"T_1764f_row16_col5\" class=\"data row16 col5\" >0.261</td>\n",
              "      <td id=\"T_1764f_row16_col6\" class=\"data row16 col6\" >-0.374</td>\n",
              "      <td id=\"T_1764f_row16_col7\" class=\"data row16 col7\" >0.052</td>\n",
              "      <td id=\"T_1764f_row16_col8\" class=\"data row16 col8\" >-0.425</td>\n",
              "      <td id=\"T_1764f_row16_col9\" class=\"data row16 col9\" >0.304</td>\n",
              "      <td id=\"T_1764f_row16_col10\" class=\"data row16 col10\" >-0.010</td>\n",
              "      <td id=\"T_1764f_row16_col11\" class=\"data row16 col11\" >0.568</td>\n",
              "      <td id=\"T_1764f_row16_col12\" class=\"data row16 col12\" >0.001</td>\n",
              "      <td id=\"T_1764f_row16_col13\" class=\"data row16 col13\" >0.034</td>\n",
              "      <td id=\"T_1764f_row16_col14\" class=\"data row16 col14\" >-0.123</td>\n",
              "      <td id=\"T_1764f_row16_col15\" class=\"data row16 col15\" >0.208</td>\n",
              "      <td id=\"T_1764f_row16_col16\" class=\"data row16 col16\" >1.000</td>\n",
              "      <td id=\"T_1764f_row16_col17\" class=\"data row16 col17\" >0.155</td>\n",
              "      <td id=\"T_1764f_row16_col18\" class=\"data row16 col18\" >0.134</td>\n",
              "      <td id=\"T_1764f_row16_col19\" class=\"data row16 col19\" >-0.143</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_1764f_level0_row17\" class=\"row_heading level0 row17\" >17</th>\n",
              "      <td id=\"T_1764f_row17_col0\" class=\"data row17 col0\" >0.241</td>\n",
              "      <td id=\"T_1764f_row17_col1\" class=\"data row17 col1\" >0.371</td>\n",
              "      <td id=\"T_1764f_row17_col2\" class=\"data row17 col2\" >0.164</td>\n",
              "      <td id=\"T_1764f_row17_col3\" class=\"data row17 col3\" >0.339</td>\n",
              "      <td id=\"T_1764f_row17_col4\" class=\"data row17 col4\" >0.112</td>\n",
              "      <td id=\"T_1764f_row17_col5\" class=\"data row17 col5\" >0.278</td>\n",
              "      <td id=\"T_1764f_row17_col6\" class=\"data row17 col6\" >-0.217</td>\n",
              "      <td id=\"T_1764f_row17_col7\" class=\"data row17 col7\" >0.399</td>\n",
              "      <td id=\"T_1764f_row17_col8\" class=\"data row17 col8\" >0.050</td>\n",
              "      <td id=\"T_1764f_row17_col9\" class=\"data row17 col9\" >-0.139</td>\n",
              "      <td id=\"T_1764f_row17_col10\" class=\"data row17 col10\" >0.111</td>\n",
              "      <td id=\"T_1764f_row17_col11\" class=\"data row17 col11\" >0.019</td>\n",
              "      <td id=\"T_1764f_row17_col12\" class=\"data row17 col12\" >0.044</td>\n",
              "      <td id=\"T_1764f_row17_col13\" class=\"data row17 col13\" >-0.119</td>\n",
              "      <td id=\"T_1764f_row17_col14\" class=\"data row17 col14\" >-0.052</td>\n",
              "      <td id=\"T_1764f_row17_col15\" class=\"data row17 col15\" >-0.092</td>\n",
              "      <td id=\"T_1764f_row17_col16\" class=\"data row17 col16\" >0.155</td>\n",
              "      <td id=\"T_1764f_row17_col17\" class=\"data row17 col17\" >1.000</td>\n",
              "      <td id=\"T_1764f_row17_col18\" class=\"data row17 col18\" >0.418</td>\n",
              "      <td id=\"T_1764f_row17_col19\" class=\"data row17 col19\" >0.328</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_1764f_level0_row18\" class=\"row_heading level0 row18\" >18</th>\n",
              "      <td id=\"T_1764f_row18_col0\" class=\"data row18 col0\" >0.273</td>\n",
              "      <td id=\"T_1764f_row18_col1\" class=\"data row18 col1\" >0.066</td>\n",
              "      <td id=\"T_1764f_row18_col2\" class=\"data row18 col2\" >-0.189</td>\n",
              "      <td id=\"T_1764f_row18_col3\" class=\"data row18 col3\" >0.058</td>\n",
              "      <td id=\"T_1764f_row18_col4\" class=\"data row18 col4\" >-0.348</td>\n",
              "      <td id=\"T_1764f_row18_col5\" class=\"data row18 col5\" >-0.348</td>\n",
              "      <td id=\"T_1764f_row18_col6\" class=\"data row18 col6\" >-0.231</td>\n",
              "      <td id=\"T_1764f_row18_col7\" class=\"data row18 col7\" >0.164</td>\n",
              "      <td id=\"T_1764f_row18_col8\" class=\"data row18 col8\" >-0.375</td>\n",
              "      <td id=\"T_1764f_row18_col9\" class=\"data row18 col9\" >0.038</td>\n",
              "      <td id=\"T_1764f_row18_col10\" class=\"data row18 col10\" >0.099</td>\n",
              "      <td id=\"T_1764f_row18_col11\" class=\"data row18 col11\" >0.292</td>\n",
              "      <td id=\"T_1764f_row18_col12\" class=\"data row18 col12\" >0.091</td>\n",
              "      <td id=\"T_1764f_row18_col13\" class=\"data row18 col13\" >-0.230</td>\n",
              "      <td id=\"T_1764f_row18_col14\" class=\"data row18 col14\" >0.182</td>\n",
              "      <td id=\"T_1764f_row18_col15\" class=\"data row18 col15\" >-0.353</td>\n",
              "      <td id=\"T_1764f_row18_col16\" class=\"data row18 col16\" >0.134</td>\n",
              "      <td id=\"T_1764f_row18_col17\" class=\"data row18 col17\" >0.418</td>\n",
              "      <td id=\"T_1764f_row18_col18\" class=\"data row18 col18\" >1.000</td>\n",
              "      <td id=\"T_1764f_row18_col19\" class=\"data row18 col19\" >0.280</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_1764f_level0_row19\" class=\"row_heading level0 row19\" >19</th>\n",
              "      <td id=\"T_1764f_row19_col0\" class=\"data row19 col0\" >-0.133</td>\n",
              "      <td id=\"T_1764f_row19_col1\" class=\"data row19 col1\" >0.358</td>\n",
              "      <td id=\"T_1764f_row19_col2\" class=\"data row19 col2\" >-0.131</td>\n",
              "      <td id=\"T_1764f_row19_col3\" class=\"data row19 col3\" >-0.181</td>\n",
              "      <td id=\"T_1764f_row19_col4\" class=\"data row19 col4\" >-0.335</td>\n",
              "      <td id=\"T_1764f_row19_col5\" class=\"data row19 col5\" >-0.341</td>\n",
              "      <td id=\"T_1764f_row19_col6\" class=\"data row19 col6\" >0.169</td>\n",
              "      <td id=\"T_1764f_row19_col7\" class=\"data row19 col7\" >0.275</td>\n",
              "      <td id=\"T_1764f_row19_col8\" class=\"data row19 col8\" >-0.074</td>\n",
              "      <td id=\"T_1764f_row19_col9\" class=\"data row19 col9\" >0.193</td>\n",
              "      <td id=\"T_1764f_row19_col10\" class=\"data row19 col10\" >0.416</td>\n",
              "      <td id=\"T_1764f_row19_col11\" class=\"data row19 col11\" >-0.239</td>\n",
              "      <td id=\"T_1764f_row19_col12\" class=\"data row19 col12\" >0.221</td>\n",
              "      <td id=\"T_1764f_row19_col13\" class=\"data row19 col13\" >-0.064</td>\n",
              "      <td id=\"T_1764f_row19_col14\" class=\"data row19 col14\" >-0.184</td>\n",
              "      <td id=\"T_1764f_row19_col15\" class=\"data row19 col15\" >0.120</td>\n",
              "      <td id=\"T_1764f_row19_col16\" class=\"data row19 col16\" >-0.143</td>\n",
              "      <td id=\"T_1764f_row19_col17\" class=\"data row19 col17\" >0.328</td>\n",
              "      <td id=\"T_1764f_row19_col18\" class=\"data row19 col18\" >0.280</td>\n",
              "      <td id=\"T_1764f_row19_col19\" class=\"data row19 col19\" >1.000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "sns.distplot(ins['Age'])\n",
        "sns.lineplot(ins['Age']).set_title('Distplot for Age:')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 436
        },
        "id": "2Cc1RbqpOwZn",
        "outputId": "36e5a9dc-e2a1-4010-f679-ad24df2e2dfb"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "  warnings.warn(msg, FutureWarning)\n",
            "/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  FutureWarning\n",
            "/usr/local/lib/python3.7/dist-packages/numpy/lib/nanfunctions.py:1376: RuntimeWarning: All-NaN slice encountered\n",
            "  overwrite_input=overwrite_input, interpolation=interpolation\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Distplot for Age:')"
            ]
          },
          "metadata": {},
          "execution_count": 8
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "plt.bar(ins['Age'],ins['charges'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "gDBbSsbiO6Vm",
        "outputId": "8d749a18-7791-48eb-a4c7-32847fe68177"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<BarContainer object of 1338 artists>"
            ]
          },
          "metadata": {},
          "execution_count": 9
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.distplot(ins['BMI'])\n",
        "sns.lineplot(ins['BMI']).set_title('Distplot for BMI:')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 436
        },
        "id": "rg-3XVB1O9HD",
        "outputId": "60331398-9645-4de2-f2b8-1968acf3a963"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "  warnings.warn(msg, FutureWarning)\n",
            "/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  FutureWarning\n",
            "/usr/local/lib/python3.7/dist-packages/numpy/lib/nanfunctions.py:1376: RuntimeWarning: All-NaN slice encountered\n",
            "  overwrite_input=overwrite_input, interpolation=interpolation\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Distplot for BMI:')"
            ]
          },
          "metadata": {},
          "execution_count": 10
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.bar(ins['BMI'],ins['charges'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "iz4sa7DFPDB3",
        "outputId": "769afa7e-943d-4c24-ff87-b73b3c0211f2"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<BarContainer object of 1338 artists>"
            ]
          },
          "metadata": {},
          "execution_count": 11
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "sns.countplot(ins['Children'])\n",
        "sns.lineplot(ins['Children']).set_title('Countplot for charges:')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 436
        },
        "id": "eDvJ7tO_POMD",
        "outputId": "bc6cf753-65cb-4ad6-ff66-f56f12be6632"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  FutureWarning\n",
            "/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  FutureWarning\n",
            "/usr/local/lib/python3.7/dist-packages/numpy/lib/nanfunctions.py:1376: RuntimeWarning: All-NaN slice encountered\n",
            "  overwrite_input=overwrite_input, interpolation=interpolation\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Countplot for charges:')"
            ]
          },
          "metadata": {},
          "execution_count": 12
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.bar(ins['Children'],ins['charges'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "xI41-C9TPY6f",
        "outputId": "9d4f55f6-117c-4f3a-bd43-1cb91a9f6f3b"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<BarContainer object of 1338 artists>"
            ]
          },
          "metadata": {},
          "execution_count": 13
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.countplot(ins['Gender'])\n",
        "sns.lineplot(ins['Gender']).set_title('Countplot for Gender:')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 436
        },
        "id": "-tqbN9ujPiv9",
        "outputId": "a2740bec-bc88-4aa3-da61-4bd79afe5bee"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  FutureWarning\n",
            "/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  FutureWarning\n",
            "/usr/local/lib/python3.7/dist-packages/numpy/lib/nanfunctions.py:1376: RuntimeWarning: All-NaN slice encountered\n",
            "  overwrite_input=overwrite_input, interpolation=interpolation\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Countplot for Gender:')"
            ]
          },
          "metadata": {},
          "execution_count": 14
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.countplot(ins['smoker'])\n",
        "sns.lineplot(ins['smoker']).set_title('Countplot for smoker:')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 436
        },
        "id": "74elCmxYPn7O",
        "outputId": "b35d6440-3814-49d0-aecf-a005351ba9a1"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  FutureWarning\n",
            "/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  FutureWarning\n",
            "/usr/local/lib/python3.7/dist-packages/numpy/lib/nanfunctions.py:1376: RuntimeWarning: All-NaN slice encountered\n",
            "  overwrite_input=overwrite_input, interpolation=interpolation\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Countplot for smoker:')"
            ]
          },
          "metadata": {},
          "execution_count": 15
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.bar(ins['smoker'],ins['charges'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "khCOHbXNPvFS",
        "outputId": "fef1ac96-e545-4f22-ade2-fde8965cd9e4"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<BarContainer object of 1338 artists>"
            ]
          },
          "metadata": {},
          "execution_count": 16
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.countplot(ins['region'])\n",
        "sns.lineplot(ins['region']).set_title('Countplot for region:')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 436
        },
        "id": "_IHwNe8sPzQN",
        "outputId": "25e5fda8-a771-4bc8-aa12-089ea9254f8e"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  FutureWarning\n",
            "/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  FutureWarning\n",
            "/usr/local/lib/python3.7/dist-packages/numpy/lib/nanfunctions.py:1376: RuntimeWarning: All-NaN slice encountered\n",
            "  overwrite_input=overwrite_input, interpolation=interpolation\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Countplot for region:')"
            ]
          },
          "metadata": {},
          "execution_count": 17
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.distplot(ins['charges'])\n",
        "sns.lineplot(ins['charges']).set_title('Distplot for charges:')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 436
        },
        "id": "QXHSzBduP06n",
        "outputId": "36fb623e-0f0e-441c-d6df-910da7ea28fc"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "  warnings.warn(msg, FutureWarning)\n",
            "/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  FutureWarning\n",
            "/usr/local/lib/python3.7/dist-packages/numpy/lib/nanfunctions.py:1376: RuntimeWarning: All-NaN slice encountered\n",
            "  overwrite_input=overwrite_input, interpolation=interpolation\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Distplot for charges:')"
            ]
          },
          "metadata": {},
          "execution_count": 18
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "varlist =  ['Gender', 'smoker', 'region']\n",
        "def binary_map(x):\n",
        "    return x.map({\n",
        "        'male':1,'female':0,\n",
        "        'yes':1,'no':0,\n",
        "        'southwest':1, 'southeast':2, 'northwest':3, 'northeast':4,\n",
        "    })\n",
        "ins[varlist] = ins[varlist].apply(binary_map)\n",
        "ins"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "h1TuE-fjP5AM",
        "outputId": "9b04f2de-c9ba-4651-b7e9-e7d44ecb6672"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Age  Gender     BMI  Children  smoker  region      charges\n",
              "0      19       0  27.900         0       1       1  16884.92400\n",
              "1      18       1  33.770         1       0       2   1725.55230\n",
              "2      28       1  33.000         3       0       2   4449.46200\n",
              "3      33       1  22.705         0       0       3  21984.47061\n",
              "4      32       1  28.880         0       0       3   3866.85520\n",
              "...   ...     ...     ...       ...     ...     ...          ...\n",
              "1333   50       1  30.970         3       0       3  10600.54830\n",
              "1334   18       0  31.920         0       0       4   2205.98080\n",
              "1335   18       0  36.850         0       0       2   1629.83350\n",
              "1336   21       0  25.800         0       0       1   2007.94500\n",
              "1337   61       0  29.070         0       1       3  29141.36030\n",
              "\n",
              "[1338 rows x 7 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f57f4139-a43d-4e8c-bce2-cb25d679e1da\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>Gender</th>\n",
              "      <th>BMI</th>\n",
              "      <th>Children</th>\n",
              "      <th>smoker</th>\n",
              "      <th>region</th>\n",
              "      <th>charges</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>19</td>\n",
              "      <td>0</td>\n",
              "      <td>27.900</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>16884.92400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>18</td>\n",
              "      <td>1</td>\n",
              "      <td>33.770</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1725.55230</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>28</td>\n",
              "      <td>1</td>\n",
              "      <td>33.000</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>4449.46200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>33</td>\n",
              "      <td>1</td>\n",
              "      <td>22.705</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>21984.47061</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>32</td>\n",
              "      <td>1</td>\n",
              "      <td>28.880</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>3866.85520</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1333</th>\n",
              "      <td>50</td>\n",
              "      <td>1</td>\n",
              "      <td>30.970</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>10600.54830</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1334</th>\n",
              "      <td>18</td>\n",
              "      <td>0</td>\n",
              "      <td>31.920</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>2205.98080</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1335</th>\n",
              "      <td>18</td>\n",
              "      <td>0</td>\n",
              "      <td>36.850</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1629.83350</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1336</th>\n",
              "      <td>21</td>\n",
              "      <td>0</td>\n",
              "      <td>25.800</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2007.94500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1337</th>\n",
              "      <td>61</td>\n",
              "      <td>0</td>\n",
              "      <td>29.070</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>29141.36030</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1338 rows Ã— 7 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f57f4139-a43d-4e8c-bce2-cb25d679e1da')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-f57f4139-a43d-4e8c-bce2-cb25d679e1da button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-f57f4139-a43d-4e8c-bce2-cb25d679e1da');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(ins.info())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CvxLvenpP9tu",
        "outputId": "a3172e9c-e01a-4ff8-ae75-f6029f0f485d"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 1338 entries, 0 to 1337\n",
            "Data columns (total 7 columns):\n",
            " #   Column    Non-Null Count  Dtype  \n",
            "---  ------    --------------  -----  \n",
            " 0   Age       1338 non-null   int64  \n",
            " 1   Gender    1338 non-null   int64  \n",
            " 2   BMI       1338 non-null   float64\n",
            " 3   Children  1338 non-null   int64  \n",
            " 4   smoker    1338 non-null   int64  \n",
            " 5   region    1338 non-null   int64  \n",
            " 6   charges   1338 non-null   float64\n",
            "dtypes: float64(2), int64(5)\n",
            "memory usage: 73.3 KB\n",
            "None\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "df_train, df_test = train_test_split(ins, train_size = 0.8, test_size = 0.2, random_state = 95)\n",
        "df_test"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "y8E_8YnzQCJi",
        "outputId": "5a7d2b82-e4b5-471b-ea6f-35802157c4a3"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Age  Gender     BMI  Children  smoker  region      charges\n",
              "1265   64       1  23.760         0       1       2  26926.51440\n",
              "1175   22       0  27.100         0       0       1   2154.36100\n",
              "1069   54       0  31.900         1       0       2  10928.84900\n",
              "1034   61       1  38.380         0       0       3  12950.07120\n",
              "775    51       1  33.330         3       0       2  10560.49170\n",
              "...   ...     ...     ...       ...     ...     ...          ...\n",
              "1090   47       1  36.190         0       1       2  41676.08110\n",
              "523    38       0  37.730         0       0       2   5397.61670\n",
              "842    23       0  32.780         2       1       2  36021.01120\n",
              "868    61       1  23.655         0       0       4  13129.60345\n",
              "81     45       0  38.285         0       0       4   7935.29115\n",
              "\n",
              "[268 rows x 7 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-649b1a6c-a3a4-4e43-b067-e1594de0abe9\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>Gender</th>\n",
              "      <th>BMI</th>\n",
              "      <th>Children</th>\n",
              "      <th>smoker</th>\n",
              "      <th>region</th>\n",
              "      <th>charges</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1265</th>\n",
              "      <td>64</td>\n",
              "      <td>1</td>\n",
              "      <td>23.760</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>26926.51440</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1175</th>\n",
              "      <td>22</td>\n",
              "      <td>0</td>\n",
              "      <td>27.100</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2154.36100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1069</th>\n",
              "      <td>54</td>\n",
              "      <td>0</td>\n",
              "      <td>31.900</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>10928.84900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1034</th>\n",
              "      <td>61</td>\n",
              "      <td>1</td>\n",
              "      <td>38.380</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>12950.07120</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>775</th>\n",
              "      <td>51</td>\n",
              "      <td>1</td>\n",
              "      <td>33.330</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>10560.49170</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1090</th>\n",
              "      <td>47</td>\n",
              "      <td>1</td>\n",
              "      <td>36.190</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>41676.08110</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>523</th>\n",
              "      <td>38</td>\n",
              "      <td>0</td>\n",
              "      <td>37.730</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>5397.61670</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>842</th>\n",
              "      <td>23</td>\n",
              "      <td>0</td>\n",
              "      <td>32.780</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>36021.01120</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>868</th>\n",
              "      <td>61</td>\n",
              "      <td>1</td>\n",
              "      <td>23.655</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>13129.60345</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>81</th>\n",
              "      <td>45</td>\n",
              "      <td>0</td>\n",
              "      <td>38.285</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>7935.29115</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>268 rows Ã— 7 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-649b1a6c-a3a4-4e43-b067-e1594de0abe9')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-649b1a6c-a3a4-4e43-b067-e1594de0abe9 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-649b1a6c-a3a4-4e43-b067-e1594de0abe9');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import MinMaxScaler\n",
        "scaler = MinMaxScaler()\n",
        "num_vars = ['Age','BMI','Children','region','charges']\n",
        "df_train[num_vars] = scaler.fit_transform(df_train[num_vars]) \n",
        "df_test[num_vars] = scaler.fit_transform(df_test[num_vars])\n",
        "df_train"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "w3ksRUHsQGBC",
        "outputId": "b710c659-99db-4fe8-a66f-764e1a1bedd0"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           Age  Gender       BMI  Children  smoker    region   charges\n",
              "260   0.869565       0  0.248588       0.0       0  0.000000  0.171038\n",
              "224   0.521739       1  0.233522       0.0       1  0.333333  0.293601\n",
              "882   0.065217       0  0.166129       0.0       0  1.000000  0.023368\n",
              "1293  0.608696       1  0.263250       0.6       0  0.666667  0.130570\n",
              "941   0.695652       0  0.810600       0.2       0  0.333333  0.134523\n",
              "...        ...     ...       ...       ...     ...       ...       ...\n",
              "353   0.326087       1  0.518832       0.0       0  1.000000  0.180100\n",
              "343   0.978261       1  0.559726       0.0       0  1.000000  0.205272\n",
              "773   0.021739       0  0.347592       0.0       1  0.666667  0.265395\n",
              "118   0.673913       0  0.301587       0.0       0  0.333333  0.119388\n",
              "1321  0.956522       1  0.288808       0.0       1  1.000000  0.430648\n",
              "\n",
              "[1070 rows x 7 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e73d170e-843d-48c4-8c88-921f8f4f5ce8\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>Gender</th>\n",
              "      <th>BMI</th>\n",
              "      <th>Children</th>\n",
              "      <th>smoker</th>\n",
              "      <th>region</th>\n",
              "      <th>charges</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>260</th>\n",
              "      <td>0.869565</td>\n",
              "      <td>0</td>\n",
              "      <td>0.248588</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.171038</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>224</th>\n",
              "      <td>0.521739</td>\n",
              "      <td>1</td>\n",
              "      <td>0.233522</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.333333</td>\n",
              "      <td>0.293601</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>882</th>\n",
              "      <td>0.065217</td>\n",
              "      <td>0</td>\n",
              "      <td>0.166129</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.023368</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1293</th>\n",
              "      <td>0.608696</td>\n",
              "      <td>1</td>\n",
              "      <td>0.263250</td>\n",
              "      <td>0.6</td>\n",
              "      <td>0</td>\n",
              "      <td>0.666667</td>\n",
              "      <td>0.130570</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>941</th>\n",
              "      <td>0.695652</td>\n",
              "      <td>0</td>\n",
              "      <td>0.810600</td>\n",
              "      <td>0.2</td>\n",
              "      <td>0</td>\n",
              "      <td>0.333333</td>\n",
              "      <td>0.134523</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>353</th>\n",
              "      <td>0.326087</td>\n",
              "      <td>1</td>\n",
              "      <td>0.518832</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.180100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>343</th>\n",
              "      <td>0.978261</td>\n",
              "      <td>1</td>\n",
              "      <td>0.559726</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.205272</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>773</th>\n",
              "      <td>0.021739</td>\n",
              "      <td>0</td>\n",
              "      <td>0.347592</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.666667</td>\n",
              "      <td>0.265395</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>118</th>\n",
              "      <td>0.673913</td>\n",
              "      <td>0</td>\n",
              "      <td>0.301587</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.333333</td>\n",
              "      <td>0.119388</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1321</th>\n",
              "      <td>0.956522</td>\n",
              "      <td>1</td>\n",
              "      <td>0.288808</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.430648</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1070 rows Ã— 7 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e73d170e-843d-48c4-8c88-921f8f4f5ce8')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-e73d170e-843d-48c4-8c88-921f8f4f5ce8 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-e73d170e-843d-48c4-8c88-921f8f4f5ce8');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_train = df_train.pop('charges')\n",
        "X_train = df_train\n",
        "y_test = df_test.pop('charges')\n",
        "X_test = df_test \n",
        "X_train"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "lMlQpJfdQK57",
        "outputId": "f9c061aa-a0f2-4ac2-f39b-beb7bdf17d82"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           Age  Gender       BMI  Children  smoker    region\n",
              "260   0.869565       0  0.248588       0.0       0  0.000000\n",
              "224   0.521739       1  0.233522       0.0       1  0.333333\n",
              "882   0.065217       0  0.166129       0.0       0  1.000000\n",
              "1293  0.608696       1  0.263250       0.6       0  0.666667\n",
              "941   0.695652       0  0.810600       0.2       0  0.333333\n",
              "...        ...     ...       ...       ...     ...       ...\n",
              "353   0.326087       1  0.518832       0.0       0  1.000000\n",
              "343   0.978261       1  0.559726       0.0       0  1.000000\n",
              "773   0.021739       0  0.347592       0.0       1  0.666667\n",
              "118   0.673913       0  0.301587       0.0       0  0.333333\n",
              "1321  0.956522       1  0.288808       0.0       1  1.000000\n",
              "\n",
              "[1070 rows x 6 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a9ecfb0e-a9c8-4a35-8be2-b5b09e78b1f1\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>Gender</th>\n",
              "      <th>BMI</th>\n",
              "      <th>Children</th>\n",
              "      <th>smoker</th>\n",
              "      <th>region</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>260</th>\n",
              "      <td>0.869565</td>\n",
              "      <td>0</td>\n",
              "      <td>0.248588</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>224</th>\n",
              "      <td>0.521739</td>\n",
              "      <td>1</td>\n",
              "      <td>0.233522</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.333333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>882</th>\n",
              "      <td>0.065217</td>\n",
              "      <td>0</td>\n",
              "      <td>0.166129</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1293</th>\n",
              "      <td>0.608696</td>\n",
              "      <td>1</td>\n",
              "      <td>0.263250</td>\n",
              "      <td>0.6</td>\n",
              "      <td>0</td>\n",
              "      <td>0.666667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>941</th>\n",
              "      <td>0.695652</td>\n",
              "      <td>0</td>\n",
              "      <td>0.810600</td>\n",
              "      <td>0.2</td>\n",
              "      <td>0</td>\n",
              "      <td>0.333333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>353</th>\n",
              "      <td>0.326087</td>\n",
              "      <td>1</td>\n",
              "      <td>0.518832</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>343</th>\n",
              "      <td>0.978261</td>\n",
              "      <td>1</td>\n",
              "      <td>0.559726</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>773</th>\n",
              "      <td>0.021739</td>\n",
              "      <td>0</td>\n",
              "      <td>0.347592</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.666667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>118</th>\n",
              "      <td>0.673913</td>\n",
              "      <td>0</td>\n",
              "      <td>0.301587</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.333333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1321</th>\n",
              "      <td>0.956522</td>\n",
              "      <td>1</td>\n",
              "      <td>0.288808</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1070 rows Ã— 6 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a9ecfb0e-a9c8-4a35-8be2-b5b09e78b1f1')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a9ecfb0e-a9c8-4a35-8be2-b5b09e78b1f1 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a9ecfb0e-a9c8-4a35-8be2-b5b09e78b1f1');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LinearRegression\n",
        "model = LinearRegression()\n",
        "model.fit(X_train, y_train)\n",
        "ypred = model.predict(X_test)\n",
        "print(\"Training Data Score for Multiple Linear Regression: \",model.score(X_train,y_train)*100)\n",
        "print(\"Testing Data Score for Multiple Linear Regression: \",model.score(X_test,y_test)*100)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SVzObaCZQPH5",
        "outputId": "eb91445e-1c34-470c-c077-d78efb4ae398"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training Data Score for Multiple Linear Regression:  74.36639441312778\n",
            "Testing Data Score for Multiple Linear Regression:  77.14801357023458\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import math\n",
        "from sklearn.metrics import mean_squared_error \n",
        "from sklearn.metrics import mean_absolute_error\n",
        "print('For Multiple Linear Regression:-')\n",
        "y_pred_train=model.predict(X_train)\n",
        "y_pred_test=model.predict(X_test)\n",
        "rmse = math.sqrt(mean_squared_error(y_test, y_pred_test)) \n",
        "print('Root mean square error : ', rmse) \n",
        "mse = (mean_squared_error(y_test, y_pred_test)) \n",
        "print('Mean square error : ', mse) \n",
        "mae= mean_absolute_error(y_test, y_pred_test)\n",
        "print('Mean absolute error : ', mae)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "D88fUayGQXRt",
        "outputId": "710ba70f-cc60-43a4-f7b4-1d190263ab0f"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "For Multiple Linear Regression:-\n",
            "Root mean square error :  0.09678484953531392\n",
            "Mean square error :  0.009367307099573357\n",
            "Mean absolute error :  0.06869237759703277\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.tree import DecisionTreeRegressor\n",
        "\n",
        "modelD = DecisionTreeRegressor(max_depth=10)\n",
        "modelD.fit(X_train, y_train)\n",
        "print(\"Training Data Score for Decision Tree regression: \",modelD.score(X_train,y_train)*100)\n",
        "print(\"Testing Data Score for Decision Tree Regression: \",modelD.score(X_test,y_test)*100)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nV1zEqo5QbTy",
        "outputId": "b91eaad4-ab45-447e-df83-af63cbf3bd00"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training Data Score for Decision Tree regression:  97.00801257693578\n",
            "Testing Data Score for Decision Tree Regression:  80.18858691988797\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import math\n",
        "from sklearn.metrics import mean_squared_error \n",
        "from sklearn.metrics import mean_absolute_error\n",
        "print('For Decision Tree Regression:-')\n",
        "y_pred=model.predict(X_test)\n",
        "rmse = math.sqrt(mean_squared_error(y_test, y_pred)) \n",
        "print('Root mean square error', rmse) \n",
        "mse = (mean_squared_error(y_test, y_pred)) \n",
        "print('Mean square error', mse) \n",
        "mae=mean_absolute_error(y_test, y_pred)\n",
        "print('Mean absolute error', mae)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3txYuP9xQc0Z",
        "outputId": "9a0cc4e5-a5cd-42bf-ae3f-042da5cf9448"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "For Decision Tree Regression:-\n",
            "Root mean square error 0.09678484953531392\n",
            "Mean square error 0.009367307099573357\n",
            "Mean absolute error 0.06869237759703277\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import RandomForestRegressor\n",
        "modelrf = RandomForestRegressor(n_estimators=10,max_depth=11)\n",
        "modelrf.fit(X_train, y_train)\n",
        "y_pred = modelrf.predict(X_test)\n",
        "print('For Random Forest Regressor:- ')\n",
        "print(\"Training Data Score : \",modelrf.score(X_train,y_train)*100)\n",
        "print(\"Testing Data Score : \",modelrf.score(X_test,y_test)*100)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uknjmwTsQf9C",
        "outputId": "d5039538-dc80-4c99-8488-a0e1a3151d52"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "For Random Forest Regressor:- \n",
            "Training Data Score :  96.09480726924289\n",
            "Testing Data Score :  86.60866656013565\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print('For Random Forest Regressor:-')\n",
        "rmse = math.sqrt(mean_squared_error(y_test, y_pred)) \n",
        "print('Root mean square error', rmse) \n",
        "mse = (mean_squared_error(y_test, y_pred)) \n",
        "print('Mean square error', mse) \n",
        "mae=mean_absolute_error(y_test, y_pred)\n",
        "print('Mean absolute error', mae)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Tx9z8SRCQkam",
        "outputId": "9757377c-a85b-4d59-a166-1fa791b9568c"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "For Random Forest Regressor:-\n",
            "Root mean square error 0.0740896106413273\n",
            "Mean square error 0.005489270404983479\n",
            "Mean absolute error 0.03847105888985905\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pickle\n",
        "# Save the model\n",
        "filename = 'ai.pkl'\n",
        "pickle.dump(modelrf, open(filename, 'wb'))"
      ],
      "metadata": {
        "id": "uqNf8XosQopG"
      },
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "list_of_columns = ins.columns\n",
        "input_data=pd.DataFrame(columns=list_of_columns)\n",
        "input_data.drop(['charges'], axis='columns', inplace=True)\n",
        "\n",
        "input_data.at[0,'Age']=int(input('Enter your age: '))\n",
        "input_data.at[0, 'Gender'] = (input('Enter your gender: '))\n",
        "input_data.at[0, 'BMI'] = float(input('Enter bmi: '))\n",
        "input_data.at[0, 'Children'] = int(input('How many children you have: '))\n",
        "input_data.at[0, 'smoker'] =(input('Are you a Smoker: '))\n",
        "input_data.at[0,'region']=(input('Enter your region: '))\n",
        "\n",
        "varlist =  ['Gender','smoker','region']\n",
        "\n",
        "def binary_map(x):\n",
        "    return x.map({\n",
        "        'male':1,'female':0,\n",
        "        'yes':1,'no':0,\n",
        "        'southwest':1, 'southeast':2, 'northwest':3, 'northeast':4,\n",
        "    })\n",
        "\n",
        "input_data[varlist] = input_data[varlist].apply(binary_map)\n",
        "\n",
        "input_data['Age']=(input_data['Age']-ins['Age'].min())/(ins['Age'].max()-ins['Age'].min())\n",
        "input_data['Gender']=(input_data['Gender']-ins['Gender'].min())/(ins['Gender'].max()-ins['Gender'].min())\n",
        "input_data['BMI']=(input_data['BMI']-ins['BMI'].min())/(ins['BMI'].max()-ins['BMI'].min())\n",
        "input_data['Children']=(input_data['Children']-ins['Children'].min())/(ins['Children'].max()-ins['Children'].min())\n",
        "input_data['smoker']=(input_data['smoker']-ins['smoker'].min())/(ins['smoker'].max()-ins['smoker'].min())\n",
        "input_data['region']=(input_data['region']-ins['region'].min())/(ins['region'].max()-ins['region'].min())\n",
        "y_pred =  modelrf.predict(input_data)\n",
        "salary=y_pred*(ins['charges'].max()-ins['charges'].min())+ins['charges'].min()\n",
        "print('Individual Medical cost billed by Insurance=',salary)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "126-oGDkQue5",
        "outputId": "5cbf45ae-c371-4cde-f607-381b1af5332b"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter your age: 18\n",
            "Enter your gender: male\n",
            "Enter bmi: 18.2\n",
            "How many children you have: 0\n",
            "Are you a Smoker: no\n",
            "Enter your region: southwest\n",
            "Individual Medical cost billed by Insurance= [1268.55445905]\n"
          ]
        }
      ]
    }
  ]
}